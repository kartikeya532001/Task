name: EKS Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t kartikeya532001/wisecow:latest .
          docker push kartikeya532001/wisecow:latest

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Create EKS Cluster
        run: |
          aws eks create-cluster \
            --name wisecow \
            --region ap-south-1 \
            --kubernetes-version 1.21 \
            --role-arn arn:aws:iam::045500908164:user/AWSCLI \
            --nodegroup-name ng-1 \
            --node-type t2.large \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 3

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks --region ap-south-1 update-kubeconfig --name wisecow
        env:
          AWS_DEFAULT_REGION: ap-south-1
          AWS_REGION: ap-south-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create Kubernetes Secrets
        run: |
          kubectl create secret generic wisecow-tls-secret \
            --from-file=secret/certificate.crt \
            --from-file=secret/private-key.key

      - name: Deploy Docker image to EKS
        run: |
          kubectl apply --force -f deployment.yaml
          kubectl apply --force -f service.yaml
          kubectl apply --force -f ingress.yaml

      - name: Verify deployment
        run: |
          kubectl get pods
          kubectl get services
          kubectl get ingress
